name: Pipeline MLOps

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true  # Annule les exécutions en double

jobs:
  entrainement:
    runs-on: ubuntu-24.04  # Utilise le runner Ubuntu 24.04
    
    services:
      serveur-mlflow:
        image: python:3.10
        ports:
          - "5000:5000"  # Expose le port 5000
        env:
          MLFLOW_TRACKING_URI: http://localhost:5000
        volumes:
          - ./mlruns:/mlruns  # Monte le dossier mlruns
          - ./mlflow.db:/mlflow.db  # Monte la base de données

    steps:
    # Étape 1: Récupération du code
    - name: Récupérer le code
      uses: actions/checkout@v4
    
    # Étape 2: Installation de Python
    - name: Installer Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    # Étape 3: Installation des dépendances
    - name: Installer les dépendances
      run: |
        python -m pip install --upgrade pip
        if [ -f src/requirements.txt ]; then
          pip install -r src/requirements.txt
        fi
        pip install mlflow==2.14.0 scikit-learn==1.4.0 pandas==2.2.1 joblib==1.3.2
    
    # Étape 4: Démarrer le serveur MLflow
    - name: Démarrer MLflow
      run: |
        pip install mlflow
        nohup mlflow server \
          --host 0.0.0.0 \
          --port 5000 \
          --backend-store-uri sqlite:///mlflow.db \
          --default-artifact-root ./mlruns &
        sleep 10  # Attend que le serveur démarre
        
    # Étape 5: Exécuter l'entraînement
    - name: Entraîner le modèle
      env:
        MLFLOW_TRACKING_URI: http://localhost:5000
      run: |
        python src/train_model.py
    
    # Étape 6: Sauvegarder les résultats
    - name: Sauvegarder les artefacts
      uses: actions/upload-artifact@v4
      with:
        name: resultats-mlflow
        path: |
          mlruns/
          mlflow.db
        retention-days: 7  # Garde les artefacts pendant 3 jours